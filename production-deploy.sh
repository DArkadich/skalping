#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –±–æ—Ç–∞ –Ω–∞ production —Å–µ—Ä–≤–µ—Ä–µ
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./production-deploy.sh [install|update|restart|logs|status]

REPO_URL="https://github.com/DArkadich/skalping.git"
PROJECT_DIR="skalping"
DOCKER_COMPOSE_FILE="docker-compose.yml"

case "$1" in
    install)
        echo "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –Ω–∞ production —Å–µ—Ä–≤–µ—Ä–µ..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
        if ! command -v docker &> /dev/null; then
            echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/engine/install/"
            exit 1
        fi
        
        if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
            echo "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose: https://docs.docker.com/compose/install/"
            exit 1
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        if [ -d "$PROJECT_DIR" ]; then
            echo "‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $PROJECT_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            read -p "–£–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                rm -rf "$PROJECT_DIR"
            else
                echo "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                exit 1
            fi
        fi
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        echo "üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
        git clone "$REPO_URL" "$PROJECT_DIR"
        
        if [ $? -ne 0 ]; then
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"
            exit 1
        fi
        
        cd "$PROJECT_DIR"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
        if [ ! -f ".env" ]; then
            echo "‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
            echo "–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Bybit API"
            echo "–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:"
            echo "BYBIT_API_KEY=your_api_key_here"
            echo "BYBIT_SECRET_KEY=your_secret_key_here"
            echo "BYBIT_TESTNET=false"
            echo "SYMBOL=BTCUSDT"
            echo "QUANTITY=0.001"
            exit 1
        fi
        
        # –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑
        echo "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
        if docker compose version &> /dev/null; then
            docker compose build --no-cache
        else
            docker-compose build --no-cache
        fi
        
        if [ $? -ne 0 ]; then
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–∞"
            exit 1
        fi
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        mkdir -p logs
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        if docker compose version &> /dev/null; then
            docker compose up -d
        else
            docker-compose up -d
        fi
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
            echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
            echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: ./production-deploy.sh status"
            echo "   2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏: ./production-deploy.sh logs"
            echo "   3. –í–µ–±-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://your-server-ip:8080"
        else
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
            exit 1
        fi
        ;;
        
    update)
        echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ production —Å–µ—Ä–≤–µ—Ä–µ..."
        
        if [ ! -d "$PROJECT_DIR" ]; then
            echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $PROJECT_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./production-deploy.sh install"
            exit 1
        fi
        
        cd "$PROJECT_DIR"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if [ -f ".env" ]; then
            echo "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
            cp .env ../.env.backup
        fi
        
        # –î–µ–ª–∞–µ–º pull
        echo "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞..."
        git pull origin main
        
        if [ $? -ne 0 ]; then
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
            exit 1
        fi
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if [ -f "../.env.backup" ]; then
            echo "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
            cp ../.env.backup .env
            rm ../.env.backup
        fi
        
        # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
        echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞..."
        if docker compose version &> /dev/null; then
            docker compose build --no-cache
        else
            docker-compose build --no-cache
        fi
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        if docker compose version &> /dev/null; then
            docker compose down && docker compose up -d
        else
            docker-compose down && docker-compose up -d
        fi
        
        echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
        ;;
        
    restart)
        echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
        
        if [ ! -d "$PROJECT_DIR" ]; then
            echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $PROJECT_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            exit 1
        fi
        
        cd "$PROJECT_DIR"
        
        if docker compose version &> /dev/null; then
            docker compose restart
        else
            docker-compose restart
        fi
        
        echo "‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        ;;
        
    stop)
        echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞..."
        
        if [ ! -d "$PROJECT_DIR" ]; then
            echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $PROJECT_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            exit 1
        fi
        
        cd "$PROJECT_DIR"
        
        if docker compose version &> /dev/null; then
            docker compose down
        else
            docker-compose down
        fi
        
        echo "‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        ;;
        
    logs)
        echo "üìã –õ–æ–≥–∏ –±–æ—Ç–∞..."
        
        if [ ! -d "$PROJECT_DIR" ]; then
            echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $PROJECT_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            exit 1
        fi
        
        cd "$PROJECT_DIR"
        
        if docker compose version &> /dev/null; then
            docker compose logs -f scalping-bot
        else
            docker-compose logs -f scalping-bot
        fi
        ;;
        
    status)
        echo "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞..."
        
        if [ ! -d "$PROJECT_DIR" ]; then
            echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $PROJECT_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            exit 1
        fi
        
        cd "$PROJECT_DIR"
        
        if docker compose version &> /dev/null; then
            docker compose ps
            echo ""
            echo "üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
            docker compose top
        else
            docker-compose ps
            echo ""
            echo "üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
            docker-compose top
        fi
        ;;
        
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {install|update|restart|stop|logs|status}"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è production:"
        echo "  install - –ü–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        echo "  update  - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞"
        echo "  restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        echo "  stop    - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"
        echo "  logs    - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
        echo "  status  - –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  ./production-deploy.sh install    # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        echo "  ./production-deploy.sh update     # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
        echo "  ./production-deploy.sh status     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
        exit 1
        ;;
esac
