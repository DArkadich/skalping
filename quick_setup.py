#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª
"""

import os
import sys

def get_input(prompt, default=None, required=True):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    while True:
        if default:
            user_input = input(f"{prompt} [{default}]: ").strip()
            if not user_input:
                user_input = default
        else:
            user_input = input(f"{prompt}: ").strip()
        
        if user_input or not required:
            return user_input
        else:
            print("‚ùå –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")

def create_env_file():
    """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    print("üöÄ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –Ω–∞ Bybit")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ .env —Ñ–∞–π–ª
    if os.path.exists('.env'):
        overwrite = input("‚ö†Ô∏è –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
    
    print("\nüìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ—Ç–∞:")
    print("(–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    
    # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\nüîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bybit API:")
    api_key = get_input("API Key Bybit")
    secret_key = get_input("Secret Key Bybit")
    testnet = get_input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å?", "true", required=False)
    
    # –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\nüí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏:")
    symbol = get_input("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞", "BTCUSDT")
    quantity = get_input("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏", "0.001")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
    print("\nüìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞:")
    profit_target = get_input("Take Profit (%)", "0.2")
    stop_loss = get_input("Stop Loss (%)", "0.1")
    max_positions = get_input("–ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π", "3")
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    print("\nüìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
    rsi_period = get_input("–ü–µ—Ä–∏–æ–¥ RSI", "14")
    rsi_overbought = get_input("–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ RSI", "70")
    rsi_oversold = get_input("–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ RSI", "30")
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\n‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    candle_interval = get_input("–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π (–º–∏–Ω—É—Ç—ã)", "1")
    position_timeout = get_input("–¢–∞–π–º–∞—É—Ç –ø–æ–∑–∏—Ü–∏–∏ (—Å–µ–∫—É–Ω–¥—ã)", "300")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
    log_level = get_input("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", "INFO")
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞
    env_content = f"""# Bybit API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BYBIT_API_KEY={api_key}
BYBIT_SECRET_KEY={secret_key}
BYBIT_TESTNET={testnet}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
SYMBOL={symbol}
QUANTITY={quantity}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
PROFIT_TARGET={float(profit_target) / 100}
STOP_LOSS={float(stop_loss) / 100}
MAX_POSITIONS={max_positions}

# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
RSI_PERIOD={rsi_period}
RSI_OVERBOUGHT={rsi_overbought}
RSI_OVERSOLD={rsi_oversold}

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
CANDLE_INTERVAL={candle_interval}
POSITION_TIMEOUT={position_timeout}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL={log_level}
"""
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n‚úÖ –§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"üìÅ –ü—É—Ç—å: {os.path.abspath('.env')}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {symbol}")
        print(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {quantity}")
        print(f"   Take Profit: {profit_target}%")
        print(f"   Stop Loss: {stop_loss}%")
        print(f"   –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å: {testnet}")
        
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã: python3 test_bot.py")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: python3 main.py")
        print("   3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: ./run_bot.sh start")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = create_env_file()
        if success:
            print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
