#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
"""

import asyncio
import logging
from config import Config
from bybit_client import BybitClient
from scalping_strategy import ScalpingStrategy

async def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API...")
    
    try:
        client = BybitClient()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        account_info = await client.get_account_info()
        if account_info:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {account_info}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ")
            return False
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        current_price = await client.get_market_price(Config.SYMBOL)
        if current_price:
            print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {Config.SYMBOL}: {current_price}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {Config.SYMBOL}")
            return False
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
        kline_data = await client.get_kline_data(Config.SYMBOL, Config.CANDLE_INTERVAL, 10)
        if kline_data:
            print(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(kline_data)} —Å–≤–µ—á–µ–π")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

async def test_strategy():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞...")
    
    try:
        strategy = ScalpingStrategy()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        client = BybitClient()
        kline_data = await client.get_kline_data(Config.SYMBOL, Config.CANDLE_INTERVAL, 100)
        
        if not kline_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
        analysis = strategy.analyze_market(kline_data)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   –°–∏–≥–Ω–∞–ª: {analysis['signal']}")
        print(f"   –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {analysis['strength']}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {analysis['reason']}")
        
        if 'indicators' in analysis:
            indicators = analysis['indicators']
            print(f"   RSI: {indicators.get('rsi', 'N/A'):.2f}")
            print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {indicators.get('current_price', 'N/A'):.2f}")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
        should_open, reason = await strategy.should_open_position(Config.SYMBOL)
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏:")
        print(f"   –°–ª–µ–¥—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å: {should_open}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return False

async def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        config = Config()
        
        print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        print(f"   –°–∏–º–≤–æ–ª: {config.SYMBOL}")
        print(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {config.QUANTITY}")
        print(f"   Take Profit: {config.PROFIT_TARGET:.4f}")
        print(f"   Stop Loss: {config.STOP_LOSS:.4f}")
        print(f"   –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {config.MAX_POSITIONS}")
        print(f"   –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å: {config.BYBIT_TESTNET}")
        print(f"   RSI –ø–µ—Ä–∏–æ–¥: {config.RSI_PERIOD}")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π: {config.CANDLE_INTERVAL} –º–∏–Ω")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            config.validate()
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            return True
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞...\n")
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_ok = await test_configuration()
    if not config_ok:
        print("\n‚ùå –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        return
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_ok = await test_connection()
    if not connection_ok:
        print("\n‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        return
    
    # –¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    strategy_ok = await test_strategy()
    if not strategy_ok:
        print("\n‚ùå –¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        return
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    print("   2. –ù–∞—á–Ω–∏—Ç–µ —Å —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ (BYBIT_TESTNET=true)")
    print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–ª—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –Ω–∞—á–∞–ª–∞")
    print("   4. –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(main())
